% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/pes_process.R
\name{pes_process}
\alias{pes_process}
\title{Patient Event Sequencing}
\usage{
pes_process(
  cohort,
  user_cutoff = 30,
  n_event_a = 1,
  n_event_b = 1,
  pes_event_file = patienteventsequencing::pes_event_file,
  omop_or_pcornet = "omop",
  multi_or_single_site = "single",
  anomaly_or_exploratory = "exploratory",
  age_groups = NULL,
  patient_level_tbl = FALSE,
  p_value = 0.9,
  time = FALSE,
  time_span = c("2012-01-01", "2020-01-01"),
  time_period = "year"
)
}
\arguments{
\item{cohort}{cohort for SSDQA testing; required fields:
\itemize{
\item \code{site}
\item \code{person_id}
\item \code{start_date}
\item \code{end_date}
}}

\item{user_cutoff}{user selected number of days between events to be used
as a threshold cutoff for analyses}

\item{n_event_a}{the number of times event A should occur before establishing
the index date; defaults to 1}

\item{n_event_b}{the number of times event B should occur before establishing
the occurrence date; defaults to 1}

\item{pes_event_file}{CSV file with definitions of each of the events}

\item{omop_or_pcornet}{Option to run the function using the OMOP or PCORnet CDM as the default CDM
\itemize{
\item \code{omop}: run the \code{\link[=pes_process_omop]{pes_process_omop()}} function against an OMOP CDM instance
\item \code{pcornet}: run the \code{\link[=pes_process_pcornet]{pes_process_pcornet()}} function against a PCORnet CDM instance
}}

\item{multi_or_single_site}{direction to determine what kind of check to run
string that is either \code{multi} or \code{single}}

\item{anomaly_or_exploratory}{direction to determine what kind of check to run; a string
that is either \code{anomaly} or \code{exploratory}}

\item{age_groups}{If you would like to stratify the results by age group,  create a table or CSV file with the following
columns and include it as the \code{age_groups} function parameter:
\itemize{
\item \code{min_age}: the minimum age for the group (i.e. 10)
\item \code{max_age}: the maximum age for the group (i.e. 20)
\item \code{group}: a string label for the group (i.e. 10-20, Young Adult, etc.)
}

If you would \emph{not} like to stratify by age group, leave the argument as NULL}

\item{patient_level_tbl}{logical to define whether an intermediate table with
patient level output should be returned}

\item{p_value}{the p value to be used as a threshold in the multi-site anomaly detection analysis}

\item{time}{logical to determine whether to output the check across time}

\item{time_span}{when \code{time = TRUE}, a vector of two dates for the observation period of the study}

\item{time_period}{when time = TRUE, this argument defines the distance between dates within the specified time period. defaults
to \code{year}, but other time periods such as \code{month} or \code{week} are also acceptable}
}
\value{
dataframe with the number of days between events A and B as an integer,
and the number of patients who had the events occur that far apart;

\if{html}{\out{<div class="sourceCode">}}\preformatted{    over time analyses will return the same output, grouped by each time
    period in the time span provided
}\if{html}{\out{</div>}}
}
\description{
This is a plausibility module that will evaluate the sequence of two clinical
events to establish whether they occur in the expected order. Users can define
the clinical events in the \code{pes_event_file} input, an example of which can be seen
using \verb{patienteventsequencing::}. This function is compatible with both the OMOP
and PCORnet CDMs based on the user's selection.
}
\examples{

#' Source setup file
source(system.file('setup.R', package = 'patienteventsequencing'))

#' Create in-memory RSQLite database using data in extdata directory
conn <- mk_testdb_omop()

#' Establish connection to database and generate internal configurations
initialize_dq_session(session_name = 'pes_process_test',
                      working_directory = getwd(),
                      db_conn = conn,
                      is_json = FALSE,
                      file_subdirectory = system.file('extdata',
                                        package = 'patienteventsequencing'),
                      cdm_schema = NA)

#' Build mock study cohort
cohort <- cdm_tbl('person') \%>\% dplyr::distinct(person_id) \%>\%
  dplyr::mutate(start_date = as.Date(-5000), # RSQLite does not store date objects,
                                      # hence the numerics
                end_date = as.Date(15000),
                site = ifelse(person_id \%in\% c(1:6), 'synth1', 'synth2'))

#' Build function input table
pes_events <- tidyr::tibble(event = c('a', 'b'),
                            event_label = c('hypertension', 'inpatient/ED visit'),
                            domain_tbl = c('condition_occurrence', 'visit_occurrence'),
                            concept_field = c('condition_concept_id', 'visit_concept_id'),
                            date_field = c('condition_start_date', 'visit_start_date'),
                            vocabulary_field = c(NA, NA),
                            codeset_name = c('dx_hypertension', 'visit_edip'),
                            filter_logic = c(NA, NA))

#' Execute `pes_process` function
#' This example will use the single site, exploratory, cross sectional
#' configuration
pes_process_example <- pes_process(cohort = cohort,
                                   multi_or_single_site = 'single',
                                   anomaly_or_exploratory = 'exploratory',
                                   time = FALSE,
                                   omop_or_pcornet = 'omop',
                                   user_cutoff = 15,
                                   n_event_a = 1,
                                   n_event_b = 2,
                                   pes_event_file = pes_events)

pes_process_example

#' Execute `pes_output` function
pes_output_example <- pes_output(process_output = pes_process_example,
                                 output_function = 'pes_ss_exp_cs')

pes_output_example

#' Easily convert the graph into an interactive ggiraph or plotly object with
#' `make_interactive_ssdqa()`

make_interactive_ssdqa(pes_output_example)
}
